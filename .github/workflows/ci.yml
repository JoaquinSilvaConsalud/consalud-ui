name: "CI - Build, Scan (SonarQube) and Docker image artifact"

on:
  push:
    branches:
      - develop
      - main
      - 'feature/**'
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: consalud-ui

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install --force

      - name: Build project
        run: npm run build

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions="**/*.test.tsx,**/*.test.ts,**/*.stories.tsx,**/*.stories.ts"
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          vuln-type: 'library'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          output: 'trivy-dependencies.txt'

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate image tag
        id: generate_tags
        run: echo "tag=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]' >> $GITHUB_OUTPUT

      - name: Build and push multi-platform Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile # Asegurate que tu Dockerfile se llame 'Dockerfile' (con D may√∫scula)
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.generate_tags.outputs.tag }}
          push: true

      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.generate_tags.outputs.tag }}
          scan-type: 'image'
          vuln-type: 'os,library'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          output: 'trivy-image.txt'
          exit-code: '0'

      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-dependencies.txt
            trivy-image.txt
