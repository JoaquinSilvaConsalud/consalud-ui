name: "CI - Build, Scan (SonarQube) and Docker image artifact"

on:
  push:
    branches:
      - develop
      - main
      - 'feature/**'
  pull_request:
    branches:
      - develop
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

env:
  PROJECT_ID: ethereal-brace-475715-d0
  GCP_REGION: southamerica-west1
  GKE_CLUSTER: new-core-repo
  IMAGE_NAME: consalud-ui
  ARTIFACT_REPO: new-core-repo

jobs:
  build-scan-and-publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
    
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: 'projects/466181763387/locations/global/workloadIdentityPools/github-pool-v4/providers/github-provider'
          service_account: 'github-actions@ethereal-brace-475715-d0.iam.gserviceaccount.com'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/new-core-repo/${{ env.IMAGE_NAME }}:latest

      - name: Set up Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.sources=src
            -Dsonar.tests=src
            -Dsonar.test.inclusions="**/*.test.tsx,**/*.test.ts,**/*.stories.tsx,**/*.stories.ts"
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: Run Trivy FS scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          vuln-type: 'library'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          output: 'trivy-dependencies.txt'

#      - name: Set up QEMU for multi-platform builds
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3
#
#      - name: Log in to GitHub Container Registry
#        uses: docker/login-action@v3
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Generate image tag
#        id: generate_tags
#        run: echo "tag=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest" | tr '[:upper:]' '[:lower:]' >> $GITHUB_OUTPUT

#      - name: Build and push multi-platform Docker image
#        uses: docker/build-push-action@v6
#        with:
#          context: .
#          file: ./Dockerfile 
#          platforms: linux/amd64,linux/arm64
#          tags: ${{ steps.generate_tags.outputs.tag }}
#          push: true

      - name: Get GKE credentials
        run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --region ${{ env.GCP_REGION }}

      - name: Deploy to GKE
        run: kubectl apply -f k8s/

      - name: Run Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.generate_tags.outputs.tag }}
          scan-type: 'image'
          vuln-type: 'os,library'
          ignore-unfixed: true
          format: 'table'
          severity: 'HIGH,CRITICAL'
          output: 'trivy-image.txt'
          exit-code: '0'

      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: |
            trivy-dependencies.txt
            trivy-image.txt
